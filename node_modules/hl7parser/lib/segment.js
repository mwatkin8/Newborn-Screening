var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nodeBase_1 = require('./nodeBase');
var delimiters_1 = require("./delimiters");
var field_1 = require("./field");
var subComponent_1 = require("./subComponent");
var Segment = (function (_super) {
    __extends(Segment, _super);
    function Segment(parent, text) {
        _super.call(this, parent, text, delimiters_1.default.Field);
        if (typeof text !== "string" || text.length == 0) {
            throw new Error("Segment must have a name.");
        }
        this._segmentName = text.slice(0, 3);
    }
    Segment.prototype.read = function (path) {
        var index = parseInt(path.shift());
        if (index < 1)
            return null;
        // TODO: MSH already parses the index == 2. Instead of doing this here, do it in "children" accessor to add in the index == 1
        // Special handling for MSH. In the MSH segment, field 1 is the field separator, field 2 is the encoding characters
        // then the rest of the fields start with 3.
        if (this.path[0] == "MSH") {
            if (index == 1) {
                return new subComponent_1.default(this, "1", this.message.delimiters[delimiters_1.default.Field]);
            }
            else {
                index--;
            }
        }
        // TODO: Handle MSH for writing
        var field = this.children[index];
        return field && path.length > 0 ? field.read(path) : field;
    };
    Segment.prototype.writeCore = function (path, value) {
        var index = parseInt(path.shift());
        if (index < 1)
            return;
        // Special handling for MSH. In the MSH segment, field 1 is the field separator, field 2 is the encoding characters
        // then the rest of the fields start with 3.
        if (this.path[0] == "MSH") {
            if (index == 1 || index == 2) {
                throw new Error("You cannot assign the field separator or encoding characters");
            }
            else {
                index--;
            }
        }
        return this.writeAtIndex(path, value, index);
    };
    Segment.prototype.pathCore = function () {
        return [this._segmentName];
    };
    Segment.prototype.createChild = function (text, index) {
        return new field_1.default(this, index.toString(), text);
    };
    return Segment;
})(nodeBase_1.default);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Segment;
