var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nodeBase_1 = require('./nodeBase');
var ValueNode = (function (_super) {
    __extends(ValueNode, _super);
    function ValueNode(parent, key, text, delimiter) {
        if (delimiter === void 0) { delimiter = null; }
        _super.call(this, parent, text, delimiter);
        this.key = key;
    }
    ValueNode.prototype.toString = function () {
        var children = this.children;
        return children.length > 1 ? this.toRaw() : children[0].toString();
    };
    ValueNode.prototype.toDate = function () {
        var text = this.toString();
        if (text.length == 8) {
            // YYYYMMDD
            return new Date(parseInt(text.slice(0, 4)), parseInt(text.slice(4, 6)) - 1, parseInt(text.slice(6, 8)), 0, 0, 0);
        }
        else if (text.length == 12) {
            // YYYYMMDDHHMM
            return new Date(parseInt(text.slice(0, 4)), parseInt(text.slice(4, 6)) - 1, parseInt(text.slice(6, 8)), parseInt(text.slice(8, 10)), parseInt(text.slice(10, 12)), 0);
        }
        else if (text.length >= 14) {
            // YYYYMMDDHHMMSS
            return new Date(parseInt(text.slice(0, 4)), parseInt(text.slice(4, 6)) - 1, parseInt(text.slice(6, 8)), parseInt(text.slice(8, 10)), parseInt(text.slice(10, 12)), parseInt(text.slice(12, 14)));
        }
        return null;
    };
    ValueNode.prototype.toInteger = function () {
        return parseInt(this.toString());
    };
    ValueNode.prototype.toFloat = function () {
        return parseFloat(this.toString());
    };
    ValueNode.prototype.toBoolean = function () {
        switch (this.toString()) {
            case "Y":
                return true;
            case "N":
                return false;
        }
        return null;
    };
    ValueNode.prototype.pathCore = function () {
        return this.parent.path.concat([this.key]);
    };
    return ValueNode;
})(nodeBase_1.default);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ValueNode;
